plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.diffplug.spotless' version '6.16.0'
	id 'com.google.protobuf' version '0.9.2'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.9")
	queryDslVersion = "5.0.0"
	mapstructVersion = "1.6.0"
}

dependencies {
	// gRPC
	implementation 'net.devh:grpc-client-spring-boot-starter:2.13.1.RELEASE'

	// protobuf
	implementation 'com.google.protobuf:protobuf-java:3.22.2'

	implementation project(':proto')
	implementation project(':common')

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-55:3.7.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// queryDSL 설정
	implementation "com.querydsl:querydsl-core" // querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}" // querydsl
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")

	// cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	// kafka
//	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
//	implementation 'org.springframework.cloud:spring-cloud-stream'
//	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'

	// swagger
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	// elastic search
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'com.internetitem:logback-elasticsearch-appender:1.6'
	implementation 'dev.akkinoc.spring.boot:logback-access-spring-boot-starter:3.2.1'
	implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.2'

	// openfeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign:feign-jackson:13.2.1'

	// bucket4j
	implementation 'com.bucket4j:bucket4j-core:8.10.1'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// redisson
	implementation 'org.redisson:redisson:3.27.2'

	// mapstruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

//querydsl 추가 시작 (위에 plugin 추가 부분과 맞물림)
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets { // IDE의 소스 폴더에 자동으로 넣어준다.
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath // 컴파일이 될때 같이 수행
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl // Q파일을 생성해준다.
}
//querydsl 추가 끝


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		target("**/*.java")
		targetExclude("**/SecurityConfig.java", "**/SwaggerConfiguration.java", "**/generated/**")
		googleJavaFormat().aosp()  // 구글 자바 포맷 적용
		importOrder()  // import 순서 정의
		removeUnusedImports()   // 사용하지 않는 import 제거
		trimTrailingWhitespace()   // 공백 제거
		endWithNewline()  // 끝부분 New Line 처리
	}
}

task copyPrivate(type: Copy) {
	copy {
		from '../mooding_back_submodule'
		include "application-funding.yml"
		into 'src/main/resources'
	}
}

jacoco {
	toolVersion = "0.8.10"
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled false

		html.destination file("${buildDir}/jacoco/index.html")
		xml.destination file("${buildDir}/jacoco/index.xml")
//        csv.destination file("${buildDir}/jacoco/index.csv")
	}
	def Qdomains = []

	for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"**/*Application*",
							"**/*Config*",
							"**/*Dto*",
							"**/*Request*",
							"**/*Response*",
							"**/*Interceptor*",
							"**/*Exception*"
					] + Qdomains)
				})
		)
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
